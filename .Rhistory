def financials(ticker, stock):
fs = stock.financials
df = pd.DataFrame(data=fs)
curr_year = int(date.today().year)
gross = [df.loc['Gross Profit'][i]/1000000 for i in range(4)]
dt = [f'5/31/{curr_year}', f'5/31/{curr_year-1}', f'5/31/{curr_year-2}', f'5/31/{curr_year-3}']
sns.barplot(data=df, x=dt, y=gross, color='#FEBD18')
plt.title(f'{ticker} Gross Profit')
plt.xlabel('Date')
plt.ylabel('Profits (millions)')
plt.show()
quit
def financials(ticker, stock):
fs = stock.financials
df = pd.DataFrame(data=fs)
curr_year = int(date.today().year)
gross = [df.loc['Gross Profit'][i]/1000000 for i in range(4)]
dt = [f'5/31/{curr_year}', f'5/31/{curr_year-1}', f'5/31/{curr_year-2}', f'5/31/{curr_year-3}']
sns.barplot(data=df, x=dt, y=gross, color='#FEBD18')
plt.title(f'{ticker} Gross Profit')
plt.xlabel('Date')
plt.ylabel('Profits (millions)')
plt.show()
quit
library(reticulate)
# Imports
import finviz as fv
import yfinance as yf
import matplotlib.pyplot as plt
import pandas as pd
import seaborn as sns
from datetime import date
# Market Profile Table
TICKER = 'MSFT'
stock_info = fv.get_stock(TICKER)
mkt_profile = {
'Price':float(stock_info['Price']),
'Beta':float(stock_info['Beta']),
'Market Cap':str(stock_info['Market Cap']),
'P/E':float(stock_info['P/E']),
'P/B':float(stock_info['P/B']),
'EPS (ttm)':float(stock_info['EPS (ttm)']),
'ROE':str(stock_info['ROE']),
'ROI':str(stock_info['ROI'])}
# Reticulate variables
PRICE = mkt_profile['Price']
BETA = mkt_profile['Beta']
MARKET_CAP = mkt_profile['Market Cap']
P_E = mkt_profile['P/E']
P_B = mkt_profile['P/B']
EPS = mkt_profile['EPS (ttm)']
ROE = str(mkt_profile['ROE'])
ROI = str(mkt_profile['ROI'])
# Remove % sign (Latex doesn't like compiling these for some reason)
ROE = ROE[:-1]
ROI = ROI[:-1]
mkt = pd.DataFrame.from_dict(mkt_profile, orient='index', columns=[''])
# yfinance for price history
TICKER = 'MSFT'
def price_chart(ticker)
stock = yf.Ticker(TICKER)
hist = stock.history(period='6mo', interval='1d')
df = pd.DataFrame(data=hist, columns=['Close'])
df.reset_index(inplace=True)
# Plot
plt.plot(df['Date'], df['Close'], color='#800000')
plt.title(f'{TICKER} Price History')
plt.xlabel('Date')
plt.ylabel('Price')
plt.savefig('./rif-logos/price-chart.png')
def financials(ticker):
stock = yf.Ticker(TICKER)
fs = stock.financials
df = pd.DataFrame(data=fs)
curr_year = int(date.today().year)
gross = [df.loc['Gross Profit'][i]/1000000 for i in range(4)]
dt = [f'5/31/{curr_year}', f'5/31/{curr_year-1}', f'5/31/{curr_year-2}', f'5/31/{curr_year-3}']
sns.barplot(data=df, x=dt, y=gross, color='#FEBD18')
plt.title(f'{ticker} Gross Profit')
plt.xlabel('Date')
plt.ylabel('Profits (millions)')
plt.show()
quit
library(reticulate)
# Imports
import finviz as fv
import yfinance as yf
import matplotlib.pyplot as plt
import pandas as pd
import seaborn as sns
from datetime import date
# Market Profile Table
TICKER = 'MSFT'
stock_info = fv.get_stock(TICKER)
mkt_profile = {
'Price':float(stock_info['Price']),
'Beta':float(stock_info['Beta']),
'Market Cap':str(stock_info['Market Cap']),
'P/E':float(stock_info['P/E']),
'P/B':float(stock_info['P/B']),
'EPS (ttm)':float(stock_info['EPS (ttm)']),
'ROE':str(stock_info['ROE']),
'ROI':str(stock_info['ROI'])}
# Reticulate variables
PRICE = mkt_profile['Price']
BETA = mkt_profile['Beta']
MARKET_CAP = mkt_profile['Market Cap']
P_E = mkt_profile['P/E']
P_B = mkt_profile['P/B']
EPS = mkt_profile['EPS (ttm)']
ROE = str(mkt_profile['ROE'])
ROI = str(mkt_profile['ROI'])
# Remove % sign (Latex doesn't like compiling these for some reason)
ROE = ROE[:-1]
ROI = ROI[:-1]
mkt = pd.DataFrame.from_dict(mkt_profile, orient='index', columns=[''])
### Definitions ###
def price_chart(ticker)
stock = yf.Ticker(TICKER)
hist = stock.history(period='6mo', interval='1d')
df = pd.DataFrame(data=hist, columns=['Close'])
df.reset_index(inplace=True)
# Plot
plt.plot(df['Date'], df['Close'], color='#800000')
plt.title(f'{TICKER} Price History')
plt.xlabel('Date')
plt.ylabel('Price')
plt.savefig('./rif-logos/price-chart.png')
def financials(ticker):
stock = yf.Ticker(TICKER)
fin = stock.financials
df = pd.DataFrame(data=fin)
curr_year = int(date.today().year)
gross = [df.loc['Gross Profit'][i]/1000000 for i in range(4)]
dt = [f'5/31/{curr_year}', f'5/31/{curr_year-1}', f'5/31/{curr_year-2}', f'5/31/{curr_year-3}']
# Plot
sns.barplot(data=df, x=dt, y=gross, color='#FEBD18')
plt.title(f'{ticker} Gross Profit')
plt.xlabel('Date')
plt.ylabel('Profits (millions)')
plt.savefig('./rif-logos/gross-profit.png')
### Run ###
TICKER = 'MSFT'
price_chart(TICKER)
financials(TICKER)
### Definitions ###
def price_chart(ticker)
stock = yf.Ticker(TICKER)
hist = stock.history(period='6mo', interval='1d')
df = pd.DataFrame(data=hist, columns=['Close'])
df.reset_index(inplace=True)
# Plot
plt.plot(df['Date'], df['Close'], color='#800000')
plt.title(f'{TICKER} Price History')
plt.xlabel('Date')
plt.ylabel('Price')
plt.savefig('./rif-logos/price-chart.png')
def financials(ticker):
stock = yf.Ticker(TICKER)
fin = stock.financials
df = pd.DataFrame(data=fin)
curr_year = int(date.today().year)
gross = [df.loc['Gross Profit'][i]/1000000 for i in range(4)]
dt = ['5/31/{}'.format(curr_year), '5/31/{}'.format(curr_year-1), '5/31/{}'.format(curr_year-2), '5/31/{}'.format(curr_year-3)]
# Plot
sns.barplot(data=df, x=dt, y=gross, color='#FEBD18')
plt.title(f'{ticker} Gross Profit')
plt.xlabel('Date')
plt.ylabel('Profits (millions)')
plt.savefig('./rif-logos/gross-profit.png')
### Run ###
TICKER = 'MSFT'
price_chart(TICKER)
financials(TICKER)
### Definitions ###
def price_chart(ticker)
stock = yf.Ticker(TICKER)
hist = stock.history(period='6mo', interval='1d')
df = pd.DataFrame(data=hist, columns=['Close'])
df.reset_index(inplace=True)
# Plot
plt.plot(df['Date'], df['Close'], color='#800000')
plt.title(f'{TICKER} Price History')
plt.xlabel('Date')
plt.ylabel('Price')
plt.savefig('./rif-logos/price-chart.png')
def financials(ticker):
stock = yf.Ticker(TICKER)
fin = stock.financials
df = pd.DataFrame(data=fin)
curr_year = int(date.today().year)
gross = [df.loc['Gross Profit'][i]/1000000 for i in range(4)]
dt = ['5/31/{}'.format(curr_year), '5/31/{}'.format(curr_year-1), '5/31/{}'.format(curr_year-2), '5/31/{}'.format(curr_year-3)]
# Plot
sns.barplot(data=df, x=dt, y=gross, color='#FEBD18')
plt.title(f'{ticker} Gross Profit')
plt.xlabel('Date')
plt.ylabel('Profits (millions)')
plt.savefig('./rif-logos/gross-profit.png')
### Run ###
TICKER = 'MSFT'
#price_chart(TICKER)
#financials(TICKER)
### Definitions ###
def price_chart(ticker):
stock = yf.Ticker(TICKER)
hist = stock.history(period='6mo', interval='1d')
df = pd.DataFrame(data=hist, columns=['Close'])
df.reset_index(inplace=True)
# Plot
plt.plot(df['Date'], df['Close'], color='#800000')
plt.title(f'{TICKER} Price History')
plt.xlabel('Date')
plt.ylabel('Price')
plt.savefig('./rif-logos/price-chart.png')
def financials(ticker):
stock = yf.Ticker(TICKER)
fin = stock.financials
df = pd.DataFrame(data=fin)
curr_year = int(date.today().year)
gross = [df.loc['Gross Profit'][i]/1000000 for i in range(4)]
dt = ['5/31/{}'.format(curr_year), '5/31/{}'.format(curr_year-1), '5/31/{}'.format(curr_year-2), '5/31/{}'.format(curr_year-3)]
# Plot
sns.barplot(data=df, x=dt, y=gross, color='#FEBD18')
plt.title(f'{ticker} Gross Profit')
plt.xlabel('Date')
plt.ylabel('Profits (millions)')
plt.savefig('./rif-logos/gross-profit.png')
### Run ###
TICKER = 'MSFT'
price_chart(TICKER)
financials(TICKER)
### Definitions ###
def price_chart(ticker):
stock = yf.Ticker(TICKER)
hist = stock.history(period='6mo', interval='1d')
df = pd.DataFrame(data=hist, columns=['Close'])
df.reset_index(inplace=True)
# Plot
plt.plot(df['Date'], df['Close'], color='#800000')
plt.title(f'{TICKER} Price History')
plt.xlabel('Date')
plt.ylabel('Price')
plt.savefig('./rif-logos/price-chart.png')
def financials(ticker):
stock = yf.Ticker(TICKER)
fin = stock.financials
df = pd.DataFrame(data=fin)
curr_year = int(date.today().year)
gross = [df.loc['Gross Profit'][i]/1000000 for i in range(4)]
dt = ['5/31/{}'.format(curr_year), '5/31/{}'.format(curr_year-1), '5/31/{}'.format(curr_year-2), '5/31/{}'.format(curr_year-3)]
# Plot
sns.barplot(data=df, x=dt, y=gross, color='#FEBD18')
plt.title(f'{ticker} Gross Profit')
plt.xlabel('Date')
plt.ylabel('Profits (millions)')
plt.savefig('./rif-logos/gross-profit.png')
def ebitda(ticker):
stock = yf.Ticker(TICKER)
eb = stock.financials
df = pd.DataFrame(data=eb)
curr_year = int(date.today().year)
gross = [df.loc['Normalized EBITDA'][i] for i in range(4)]
dt = ['5/31/{}'.format(curr_year), '5/31/{}'.format(curr_year-1), '5/31/{}'.format(curr_year-2), '5/31/{}'.format(curr_year-3)]
# Plot
sns.barplot(data=df, x=dt, y=gross, color='#FEBD18')
plt.title(f'{ticker} Normalized EBITDA')
plt.xlabel('Date')
plt.ylabel('USD (millions)')
plt.savefig('./rif-logos/norm-ebitda.png')
### Run ###
TICKER = 'MSFT'
price_chart(TICKER)
financials(TICKER)
ebitda(TICKER)
### Definitions ###
def price_chart(ticker):
stock = yf.Ticker(TICKER)
hist = stock.history(period='6mo', interval='1d')
df = pd.DataFrame(data=hist, columns=['Close'])
df.reset_index(inplace=True)
# Plot
plt.plot(df['Date'], df['Close'], color='#800000')
plt.title(f'{TICKER} Price History')
plt.xlabel('Date')
plt.ylabel('Price')
plt.savefig('./rif-logos/price-chart.png')
def financials(ticker):
stock = yf.Ticker(TICKER)
fin = stock.financials
df = pd.DataFrame(data=fin)
curr_year = int(date.today().year)
gross = [df.loc['Gross Profit'][i]/1000000 for i in range(4)]
dt = ['5/31/{}'.format(curr_year), '5/31/{}'.format(curr_year-1), '5/31/{}'.format(curr_year-2), '5/31/{}'.format(curr_year-3)]
print(df)
# Plot
sns.barplot(data=df, x=dt, y=gross, color='#FEBD18')
plt.title(f'{ticker} Gross Profit')
plt.xlabel('Date')
plt.ylabel('Profits (millions)')
plt.savefig('./rif-logos/gross-profit.png')
def ebitda(ticker):
stock = yf.Ticker(TICKER)
eb = stock.financials
df = pd.DataFrame(data=eb)
curr_year = int(date.today().year)
gross = [df.loc['Normalized EBITDA'][i] for i in range(4)]
dt = ['5/31/{}'.format(curr_year), '5/31/{}'.format(curr_year-1), '5/31/{}'.format(curr_year-2), '5/31/{}'.format(curr_year-3)]
# Plot
sns.barplot(data=df, x=dt, y=gross, color='#FEBD18')
plt.title(f'{ticker} Normalized EBITDA')
plt.xlabel('Date')
plt.ylabel('USD (millions)')
plt.savefig('./rif-logos/norm-ebitda.png')
### Run ###
TICKER = 'MSFT'
price_chart(TICKER)
financials(TICKER)
#ebitda(TICKER)
library(reticulate)
library(knitr)
library(kableExtra)
library(xtable)
use_python("/usr/bin/python3")
knitr::include_graphics("./rif-logos/gross-profit.png")
knitr::include_graphics("./rif-logos/ebit.png")
reticulate::repl_python()
library(reticulate)
library(knitr)
library(kableExtra)
library(xtable)
use_python("/usr/bin/python3")
reticulate::repl_python()
knitr::include_graphics("./rif-logos/price-chart.png")
knitr::include_graphics("./rif-logos/gross-profit.png")
knitr::include_graphics("./rif-logos/ebit.png")
reticulate::repl_python()
library(reticulate)
library(knitr)
library(kableExtra)
library(xtable)
use_python("/usr/bin/python3")
reticulate::repl_python()
knitr::include_graphics("./rif-logos/price-chart.png")
reticulate::repl_python()
library(reticulate)
library(knitr)
library(kableExtra)
library(xtable)
use_python("/usr/bin/python3")
reticulate::repl_python()
knitr::include_graphics("./rif-logos/price-chart.png")
library(reticulate)
library(knitr)
library(kableExtra)
library(xtable)
use_python("/usr/bin/python3")
reticulate::repl_python()
knitr::include_graphics("./rif-logos/price-chart.png")
library(reticulate)
library(knitr)
library(kableExtra)
library(xtable)
use_python("/usr/bin/python3")
reticulate::repl_python()
knitr::include_graphics("./rif-logos/price-chart.png")
library(reticulate)
library(knitr)
library(kableExtra)
library(xtable)
use_python("/usr/bin/python3")
reticulate::repl_python()
knitr::include_graphics("./rif-logos/price-chart.png")
reticulate::repl_python()
library(reticulate)
library(knitr)
library(kableExtra)
library(xtable)
use_python("/usr/bin/python3")
reticulate::repl_python()
knitr::include_graphics("./rif-logos/price-chart.png")
library(reticulate)
library(knitr)
library(kableExtra)
library(xtable)
use_python("/usr/bin/python3")
reticulate::repl_python()
knitr::include_graphics("./rif-logos/price-chart.png")
library(reticulate)
library(knitr)
library(kableExtra)
library(xtable)
use_python("/usr/bin/python3")
reticulate::repl_python()
library(reticulate)
library(knitr)
library(kableExtra)
library(xtable)
use_python("/usr/bin/python3")
reticulate::repl_python()
library(reticulate)
library(knitr)
library(kableExtra)
library(xtable)
use_python("/usr/bin/python3")
reticulate::repl_python()
library(reticulate)
library(knitr)
library(kableExtra)
library(xtable)
use_python("/usr/bin/python3")
reticulate::repl_python()
library(reticulate)
library(knitr)
library(kableExtra)
library(xtable)
use_python("/usr/bin/python3")
reticulate::repl_python()
